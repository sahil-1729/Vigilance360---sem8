{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://H%3A/GIT%20CLONE/VIGILANCE%20360/open-react-template/lib/db.ts"],"sourcesContent":["// lib/prisma.ts\r\nimport { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\n// if (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport const db = prisma;\r\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,2GAAA,CAAA,eAAY;AAIlD,MAAM,KAAK"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file://H%3A/GIT%20CLONE/VIGILANCE%20360/open-react-template/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\r\nimport { db } from \"./db\";\r\nimport { compare } from \"bcrypt\";\r\n\r\nimport type {\r\n  GetServerSidePropsContext,\r\n  NextApiRequest,\r\n  NextApiResponse,\r\n} from \"next\";\r\nimport { getServerSession } from \"next-auth\";\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  adapter: PrismaAdapter(db),\r\n  pages: {\r\n    signIn: \"/signin\",\r\n    // signOut: \"/auth/signout\",\r\n    // error: \"/auth/error\", // Error code passed in query string as ?error=\r\n    // verifyRequest: \"/auth/verify-request\", // (used for check email message)\r\n    // newUser: \"/auth/new-user\", // New users will be directed here on first sign in (leave the property out if not of interest)\r\n  },\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: {\r\n          label: \"Email\",\r\n          type: \"text\",\r\n          placeholder: \"johndoe@gmail.com\",\r\n        },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials, req) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          return null;\r\n        }\r\n\r\n        // console.log(\"credentials \", credentials);\r\n        const userExist = await db.user.findUnique({\r\n          where: {\r\n            email: credentials.email,\r\n          },\r\n        });\r\n\r\n        // console.log(\"user exist \", userExist);\r\n        if (!userExist) {\r\n          return null;\r\n        }\r\n\r\n        const matchPass = await compare(\r\n          credentials.password,\r\n          userExist.password\r\n        );\r\n\r\n        console.log(\r\n          \"match pass \",\r\n          matchPass,\r\n          \" \",\r\n          userExist.password,\r\n          \" \",\r\n          credentials.password\r\n        );\r\n\r\n        if (!matchPass) {\r\n          return null;\r\n        }\r\n\r\n        return {\r\n          id: userExist.id + \"\",\r\n          name: userExist.name,\r\n          email: userExist.email,\r\n        };\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      // console.log(\"jwt \", user);\r\n\r\n      if (user) {\r\n        return {\r\n          ...token,\r\n          name: user.name,\r\n        };\r\n      }\r\n      return { ...token };\r\n    },\r\n    async session({ session, token }) {\r\n      console.log(session, token);\r\n\r\n      return {\r\n        ...session,\r\n        user: {\r\n          ...session.user,\r\n          name: token.name,\r\n        },\r\n      };\r\n    },\r\n  },\r\n} satisfies NextAuthOptions;\r\n\r\nexport function auth(\r\n  ...args:\r\n    | [GetServerSidePropsContext[\"req\"], GetServerSidePropsContext[\"res\"]]\r\n    | [NextApiRequest, NextApiResponse]\r\n    | []\r\n) {\r\n  return getServerSession(...args, authOptions);\r\n}\r\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AAOA;;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE,2GAAA,CAAA,KAAE;IACzB,OAAO;QACL,QAAQ;IAKV;IACA,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBACL,OAAO;oBACP,MAAM;oBACN,aAAa;gBACf;gBACA,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW,EAAE,GAAG;gBAC9B,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,4CAA4C;gBAC5C,MAAM,YAAY,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;oBACzC,OAAO;wBACL,OAAO,YAAY,KAAK;oBAC1B;gBACF;gBAEA,yCAAyC;gBACzC,IAAI,CAAC,WAAW;oBACd,OAAO;gBACT;gBAEA,MAAM,YAAY,MAAM,CAAA,GAAA,+FAAA,CAAA,UAAO,AAAD,EAC5B,YAAY,QAAQ,EACpB,UAAU,QAAQ;gBAGpB,QAAQ,GAAG,CACT,eACA,WACA,KACA,UAAU,QAAQ,EAClB,KACA,YAAY,QAAQ;gBAGtB,IAAI,CAAC,WAAW;oBACd,OAAO;gBACT;gBAEA,OAAO;oBACL,IAAI,UAAU,EAAE,GAAG;oBACnB,MAAM,UAAU,IAAI;oBACpB,OAAO,UAAU,KAAK;gBACxB;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,6BAA6B;YAE7B,IAAI,MAAM;gBACR,OAAO;oBACL,GAAG,KAAK;oBACR,MAAM,KAAK,IAAI;gBACjB;YACF;YACA,OAAO;gBAAE,GAAG,KAAK;YAAC;QACpB;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,GAAG,CAAC,SAAS;YAErB,OAAO;gBACL,GAAG,OAAO;gBACV,MAAM;oBACJ,GAAG,QAAQ,IAAI;oBACf,MAAM,MAAM,IAAI;gBAClB;YACF;QACF;IACF;AACF;AAEO,SAAS,KACd,GAAG,IAGG;IAEN,OAAO,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,KAAK,MAAM;AACnC"}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":["file://H%3A/GIT%20CLONE/VIGILANCE%20360/open-react-template/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { authOptions } from \"@/lib/auth\";\r\nimport NextAuth from \"next-auth\";\r\n\r\nconst handler = NextAuth(authOptions);\r\n\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,6GAAA,CAAA,cAAW"}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
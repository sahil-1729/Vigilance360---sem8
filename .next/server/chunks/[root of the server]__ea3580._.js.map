{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://H%3A/GIT%20CLONE/VIGILANCE%20360/open-react-template/lib/db.ts"],"sourcesContent":["// lib/prisma.ts\r\nimport { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\n// if (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport const db = prisma;\r\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,2GAAA,CAAA,eAAY;AAIlD,MAAM,KAAK"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file://H%3A/GIT%20CLONE/VIGILANCE%20360/open-react-template/app/api/user/route.ts"],"sourcesContent":["import { db } from \"@/lib/db\";\r\nimport { NextResponse } from \"next/server\";\r\nimport { hash } from \"bcrypt\";\r\nimport * as z from \"zod\";\r\n\r\nconst FormSchema = z.object({\r\n  name: z.string().min(1, \"Username is required\").max(100),\r\n  email: z.string().min(1, \"Email is required\").email(\"Invalid email\"),\r\n  password: z\r\n    .string()\r\n    .min(1, \"Password is required\")\r\n    .min(8, \"Password must have than 8 characters\"),\r\n  // company: z.string().min(1, \"Company is required\").max(100),\r\n});\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = await req.json();\r\n    console.log(body);\r\n    const { name, email, password } = FormSchema.parse(body);\r\n\r\n    console.log(name, email, password);\r\n\r\n    const existingUserByEmail = await db.user.findUnique({\r\n      where: { email },\r\n    });\r\n\r\n    console.log(\"existing user by email \", existingUserByEmail);\r\n\r\n    if (existingUserByEmail) {\r\n      return NextResponse.json({\r\n        user: null,\r\n        message: \"Email already exists\",\r\n        status: 409,\r\n      });\r\n    }\r\n\r\n    const hashedPassword = await hash(password, 10);\r\n\r\n    const newUser = await db.user.create({\r\n      data: {\r\n        email,\r\n        password: hashedPassword,\r\n        name,\r\n      },\r\n    });\r\n\r\n    console.log(\"new user \", newUser);\r\n    const { password: newPassword, ...rest } = newUser;\r\n\r\n    return NextResponse.json({\r\n      user: rest,\r\n      message: \"User created successfully\",\r\n      status: 201,\r\n    });\r\n  } catch (e) {\r\n    // return NextResponse.error(e);\r\n    return NextResponse.json({ error: e, status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,aAAa,uIAAE,MAAM,CAAC;IAC1B,MAAM,uIAAE,MAAM,GAAG,GAAG,CAAC,GAAG,wBAAwB,GAAG,CAAC;IACpD,OAAO,uIAAE,MAAM,GAAG,GAAG,CAAC,GAAG,qBAAqB,KAAK,CAAC;IACpD,UAAU,uIACP,MAAM,GACN,GAAG,CAAC,GAAG,wBACP,GAAG,CAAC,GAAG;AAEZ;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,QAAQ,GAAG,CAAC;QACZ,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,WAAW,KAAK,CAAC;QAEnD,QAAQ,GAAG,CAAC,MAAM,OAAO;QAEzB,MAAM,sBAAsB,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YACnD,OAAO;gBAAE;YAAM;QACjB;QAEA,QAAQ,GAAG,CAAC,2BAA2B;QAEvC,IAAI,qBAAqB;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,MAAM;gBACN,SAAS;gBACT,QAAQ;YACV;QACF;QAEA,MAAM,iBAAiB,MAAM,CAAA,GAAA,+FAAA,CAAA,OAAI,AAAD,EAAE,UAAU;QAE5C,MAAM,UAAU,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YACnC,MAAM;gBACJ;gBACA,UAAU;gBACV;YACF;QACF;QAEA,QAAQ,GAAG,CAAC,aAAa;QACzB,MAAM,EAAE,UAAU,WAAW,EAAE,GAAG,MAAM,GAAG;QAE3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,MAAM;YACN,SAAS;YACT,QAAQ;QACV;IACF,EAAE,OAAO,GAAG;QACV,gCAAgC;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAG,QAAQ;QAAI;IACnD;AACF"}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}